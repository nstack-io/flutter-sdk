// ignore_for_file: implementation_imports, non_constant_identifier_names, depend_on_referenced_packages

/*
 * ‚ùå GENERATED BY NSTACK, DO NOT MODIFY THIS FILE BY HAND!
 * 
 * To update this file, run
 * 
 * Flutter projects: 
 *    flutter pub run build_runner build
 * 
 * Dart projects:
 *    pub run build_runner build
 * 
 * üí° FEATURES
 * 
 * To access the NStack features:
 * - Use the global `NStack` object;
 * - Use the BuildContext extension: `context.nstack`.
 * 
 * üî§ LOCALIZATION
 * 
 * To access localization in your UI you can use an extension for BuildContexts:
 * `context.localization.yourSection.yourKey`.
 */

import 'dart:async';
import 'dart:io';

import 'package:flutter/cupertino.dart' as cupertino;
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart' as material;
import 'package:flutter/widgets.dart';
import 'package:nstack/models/app_open_platform.dart';
import 'package:nstack/models/language.dart';
import 'package:nstack/models/localize_index.dart';
import 'package:nstack/models/message.dart';
import 'package:nstack/models/nstack_config.dart';
import 'package:nstack/nstack.dart';
import 'package:nstack/partial/section_key_delegate.dart';
import 'package:nstack/sdk/localization/nstack_localization.dart';
import 'package:nstack/sdk/messages/nstack_messages.dart';
import 'package:nstack/src/nstack_repository.dart';
import 'package:url_launcher/url_launcher.dart';

export 'package:nstack/models/app_open_platform.dart';

/*
 *
 * NStack Config
 * 
 */

final NStack = NStackSdk<Localization>(
  repository: _nstackRepository,
  isDebug: kDebugMode,
  localization: _nstackLocalization,
  messages: _nstackMessages,
);

const _nstackRepository = NStackRepository(_config);

final _nstackLocalization = NStackLocalization<Localization>(
  repository: _nstackRepository,
  translations: const Localization(),
  availableLanguages: _languages,
  bundledTranslations: _bundledTranslations,
  pickedLanguageLocale: '',
  isDebug: kDebugMode,
);

final _nstackMessages = NStackMessages(
  repository: _nstackRepository,
);

const _config = NStackConfig(
  projectId: 'h6wJremI2TGFM88gbLkdyljWQuwf2hxhxvCH',
  apiKey: 'zp2S18H32b67eYAbRQh94tVw76ZzaKKXlHjd',
);

/*
 * 
 * Languages & Bundled translations
 * 
 */

final _languages = [
  LocalizeIndex(
    id: 1216,
    url: null,
    lastUpdatedAt: null,
    shouldUpdate: false,
    language: const Language(
      id: 56,
      name: 'English',
      locale: 'en-EN',
      direction: 'LRM',
      isDefault: true,
      isBestFit: true,
    ),
  ),
  LocalizeIndex(
    id: 1270,
    url: null,
    lastUpdatedAt: null,
    shouldUpdate: false,
    language: const Language(
      id: 7,
      name: 'German (Austria)',
      locale: 'de-AT',
      direction: 'LRM',
      isDefault: false,
      isBestFit: false,
    ),
  ),
];

const _bundledTranslations = {
  'en-EN':
      r'''{"data":{"default":{"title":"NStack SDK Demo","test":"test"},"test":{"testDollarSign":"$testing again new","testSingleQuotationMark":"'testing'","testDoubleQuotationMark":"\"testing\"","testMultipleLines":"testing\nmultiple\nlines\nupdated"}},"meta":{"language":{"id":56,"name":"English","locale":"en-EN","direction":"LRM","is_default":false,"is_best_fit":false},"platform":{"id":515,"slug":"mobile"}}}''',
  'de-AT':
      r'''{"data":{"default":{"title":"NStack SDK Demo","test":"test"},"test":{"testDollarSign":"\u00a0","testSingleQuotationMark":"__testSingleQuotationMark","testDoubleQuotationMark":"__testDoubleQuotationMark","testMultipleLines":"__testMultipleLines"}},"meta":{"language":{"id":7,"name":"German (Austria)","locale":"de-AT","direction":"LRM","is_default":false,"is_best_fit":false},"platform":{"id":515,"slug":"mobile"}}}''',
};

/*
 *
 * Localization & Localization Section Keys
 * 
 */

class Localization {
  final defaultSection = const _DefaultSection();
  final test = const _Test();

  const Localization();
}

class _DefaultSection extends SectionKeyDelegate {
  const _DefaultSection() : super('default');

  String get title => get('title', "NStack SDK Demo");
  String get test => get('test', "test");
}

class _Test extends SectionKeyDelegate {
  const _Test() : super('test');

  String get testDollarSign => get('testDollarSign', "\$testing again new");
  String get testSingleQuotationMark =>
      get('testSingleQuotationMark', "\'testing\'");
  String get testDoubleQuotationMark =>
      get('testDoubleQuotationMark', "\"testing\"");
  String get testMultipleLines =>
      get('testMultipleLines', "testing\nmultiple\nlines\nupdated");
}

/*
 *
 * NStack Flutter Widgets
 * 
 */

/// Allows to access NStack features via a `BuildContext`.
class NStackScope extends InheritedWidget {
  final NStackState state;
  final String checksum;

  const NStackScope({
    Key? key,
    required Widget child,
    required this.state,
    required this.checksum,
  }) : super(key: key, child: child);

  static NStackState of(BuildContext context) =>
      context.dependOnInheritedWidgetOfExactType<NStackScope>()!.state;

  @override
  bool updateShouldNotify(NStackScope oldWidget) =>
      checksum != oldWidget.checksum;
}

/// Widget that is used for accessing NStack features from the widget tree
/// & listening for localization changes.
///
/// Is required for all the children widgets like [NStackMessageListener]
///
/// In your app, use the `builder` property like this:
/// ```dart
/// MaterialApp(
///    ...
///    builder: (context, child) {
///      return NStackWidget(
///        child: child!,
///       );
///    },
///    ...
/// );
/// ```
class NStackWidget extends StatefulWidget {
  final AppOpenPlatform? platformOverride;
  final VoidCallback? onComplete;
  final Widget child;

  const NStackWidget({
    Key? key,
    required this.child,
    this.platformOverride,
    this.onComplete,
  }) : super(key: key);

  @override
  NStackState createState() => NStackState();
}

class NStackState extends State<NStackWidget> {
  final NStackSdk<Localization> _nstack = NStack;
  bool _initializedNStack = false;

  late Future<bool> _nstackInitFuture;

  late final StreamSubscription _localeChangedSubscription;

  /// Gets the NStack Localization feature configured for this project.
  NStackLocalization<Localization> get localization => _nstack.localization;

  /// Gets the NStack Message feature configured for this project.
  NStackMessages get messages => _nstack.messages;

  @override
  void initState() {
    super.initState();

    _nstackInitFuture = _nstack.init();

    _localeChangedSubscription =
        NStack.localization.onLocaleChanged.listen(_onLocaleChanged);
  }

  void _onLocaleChanged(Locale locale) {
    setState(() {});
  }

  @Deprecated('Use `NStack.localization.changeLocalization` instead')
  Future<void> changeLanguage(Locale locale) {
    return _nstack.localization
        .changeLocalization(locale)
        .whenComplete(() => setState(() {}));
  }

  @override
  void dispose() {
    _localeChangedSubscription.cancel();

    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    if (!_initializedNStack) {
      _nstack
          .appOpen(Localizations.localeOf(context),
              platformOverride: widget.platformOverride)
          .whenComplete(() => widget.onComplete?.call());
      _initializedNStack = true;
    }

    return FutureBuilder(
      future: _nstackInitFuture,
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.done) {
          return NStackScope(
            state: this,
            checksum: _nstack.localization.checksum,
            child: widget.child,
          );
        } else {
          return const SizedBox();
        }
      },
    );
  }
}

/*
 *
 * NStack Messages Feature
 * 
 */

/// Listens for new messages from the NStack Messages feature.
///
/// In where you want to use it, add this widget:
/// ```dart
/// Widget build(BuildContext context) {
///   return NStackMessageListener(
///     onMessage: (Message message) {
///       // Do whatever you want with the received message.
///       // For example, use NStackMessageDialog to display the message.
///       showDialog(
///         context: context,
///         builder: (context) {
///           return NStackMessageDialog(message: message);
///         },
///     },
///     child: Scaffold(...),
///   );
/// }
/// ```
class NStackMessageListener extends StatefulWidget {
  const NStackMessageListener({
    Key? key,
    required this.onMessage,
    this.child,
  }) : super(key: key);

  final void Function(Message message) onMessage;
  final Widget? child;

  @override
  State<NStackMessageListener> createState() => _NStackMessageListenerState();
}

class _NStackMessageListenerState extends State<NStackMessageListener> {
  late final StreamSubscription _subscription;

  @override
  void initState() {
    super.initState();

    WidgetsBinding.instance.addPostFrameCallback((timeStamp) {
      final scope = NStackScope.of(context);
      _subscription = scope.messages.onMessage.listen(widget.onMessage);
    });
  }

  @override
  void dispose() {
    _subscription.cancel();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return widget.child ?? const SizedBox();
  }
}

/// Default Message Alert Dialog that adapts to the platform and renders the:
/// - Message body
/// - OK Button
/// - Open URL button (if [Message.url] is provided)
///
/// When the dialog is dismissed, the alert reports that the message is viewed.
///
/// Use it like this:
/// ```dart
/// NStackMessageDialog.show(
///   context,
///   message: message,
///   /* Other params if needed */
/// );
/// ```
class NStackMessageDialog extends StatelessWidget {
  static const _okButtonTitleFallback = 'OK';
  static const _openUrlButtonTitleFallback = 'Open URL';
  static const _dialogTitleFallback = 'Message';

  const NStackMessageDialog._({
    Key? key,
    required this.message,
    this.onOkPressed,
    this.onOpenUrlPressed,
    this.okButtonTitle = _okButtonTitleFallback,
    this.openUrlButtonTitle = _openUrlButtonTitleFallback,
    this.dialogTitle = _dialogTitleFallback,
  }) : super(key: key);

  /// Message that was received.
  final Message message;

  /// Title of the OK button.
  final String okButtonTitle;

  /// Title of the Open URL button.
  final String openUrlButtonTitle;

  /// Title of the dialog.
  final String? dialogTitle;

  /// Optional callback when a user presses the OK button.
  ///
  /// By default, it closes the dialog and reports that the message was viewed.
  final VoidCallback? onOkPressed;

  /// Optional callback when a user presses Open URL button.
  ///
  /// By default, it closes the dialog, reports that the message was viewed
  /// and opens the URL.
  final void Function(Uri uri)? onOpenUrlPressed;

  /// Displays the dialog.
  static Future<void> show(
    BuildContext context, {
    required Message message,
    VoidCallback? onOkPressed,
    void Function(Uri uri)? onOpenUrlPressed,
    String? okButtonTitle,
    String? openUrlButtonTitle,
    String? dialogTitle = _dialogTitleFallback,
  }) {
    Widget builder(BuildContext context) {
      return NStackMessageDialog._(
        message: message,
        onOkPressed: onOkPressed,
        onOpenUrlPressed: onOpenUrlPressed,
        okButtonTitle: okButtonTitle ??
            message.localization?.okBtn ??
            _okButtonTitleFallback,
        openUrlButtonTitle: openUrlButtonTitle ??
            message.localization?.urlBtn ??
            _openUrlButtonTitleFallback,
        dialogTitle: dialogTitle,
      );
    }

    final showDialog = Platform.isIOS
        ? cupertino.showCupertinoDialog(context: context, builder: builder)
        : material.showDialog(context: context, builder: builder);

    return showDialog.whenComplete(() {
      NStack.messages.setMessageViewed(message.id);
    });
  }

  @override
  Widget build(BuildContext context) {
    final titleWidget = dialogTitle != null ? Text(dialogTitle!) : null;
    final messageWidget = Text(message.message);

    final okWidget = Text(okButtonTitle);
    final okAction = onOkPressed ?? Navigator.of(context).pop;

    final messageUrl = message.url;
    final uri = messageUrl != null ? Uri.tryParse(messageUrl) : null;

    final isUriValid = uri != null;

    final urlLaunchAction = !isUriValid
        ? null
        : (onOpenUrlPressed != null ? () => onOpenUrlPressed!(uri!) : null) ??
            () {
              launchUrl(uri!);
              Navigator.of(context).pop();
            };

    if (Platform.isIOS) {
      return cupertino.CupertinoAlertDialog(
        title: titleWidget,
        content: messageWidget,
        actions: [
          cupertino.CupertinoDialogAction(
            onPressed: okAction,
            child: okWidget,
          ),
          if (isUriValid)
            cupertino.CupertinoDialogAction(
              isDefaultAction: true,
              onPressed: urlLaunchAction,
              child: Text(openUrlButtonTitle),
            ),
        ],
      );
    }

    return material.AlertDialog(
      title: titleWidget,
      content: messageWidget,
      actions: [
        if (isUriValid)
          material.TextButton(
            onPressed: urlLaunchAction,
            child: Text(openUrlButtonTitle),
          ),
        material.TextButton(
          onPressed: okAction,
          child: okWidget,
        ),
      ],
    );
  }
}

/*
 *
 * NStack Flutter Extensions
 * 
 */

/// Allows to access the NStack features using the BuildContext
extension NStackWidgetExtension on BuildContext {
  /// NStack SDK of this project.
  NStackSdk<Localization> get nstack => NStackScope.of(this)._nstack;

  /// Provides the localization for this NStack project.
  ///
  /// Use `NStackScope.of(context).state.changeLanguage` to update language of the app.
  Localization get localization => nstack.localization.translations;
}

/// Allows to access the NStack features from StatefulWidget's State
extension NStackStateExtension<T extends StatefulWidget> on State<T> {
  /// NStack SDK of this project.
  NStackSdk<Localization> get nstack => context.nstack;

  /// Provides the localization for this NStack project.
  ///
  /// Use `NStackScope.of(context).state.changeLanguage` to update language of the app.
  Localization get localization => context.localization;
}
