/*
 * ‚ùå GENERATED BY NSTACK, DO NOT MODIFY THIS FILE BY HAND!
 * 
 * To update this file, run
 * dart run build_runner build
 * 
 * üí° FEATURES
 * 
 * To access the NStack features:
 * - Use the BuildContext extension: `context.nstack`.
 * 
 * üî§ LOCALIZATION
 * 
 * To access localization in your UI you can use an extension for BuildContexts:
 * `context.localization.assets.yourSection.yourKey`.
 *
 * üí¨ MESSAGES
 *  
 * Use `NStackMessageWidget` to access the Messages feature.
 *
 * [NStackMessageWidget.handlerConfiguration] allows you to configure how incoming messages are handled.
 * - Use `DefaultNstackHandlerConfiguration` if you want to display a default adaptive dialog
 * - Or use `CustomNstackHandlerConfiguration` if you want to handle the message yourself.
 *   it has the `onMessage` callback that provides you with the received `Message` object.
 *
 * üîñ VERSION CONTROL
 * 
 * Use `NStackVersionControlWidget` to enable version control feature.
 * You can configure the localization strings from the NStack console.
 *
 * üõ†Ô∏è IMPORTANT NOTES FOR SDK USERS
 * 
 * The default environment for the NStack SDK is `prod`.
 * As an SDK user, you typically do not need to set this value.
 * The `stg` environment is for NStack's internal use and should not be used in your `nstack.json`.
 */

/*
* Linter Exception
* The following linter exceptions have been deliberately set for specific reasons:
*/
// ignore_for_file: unnecessary_string_escapes
// ignore_for_file: unused_import
// ignore_for_file: unnecessary_cast

import 'dart:async';
import 'dart:io';

import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:nstack/models/app_open_platform.dart';
import 'package:nstack/models/language.dart';
import 'package:nstack/models/localize_index.dart';
import 'package:nstack/models/message.dart';
import 'package:nstack/models/nstack_config.dart';
import 'package:nstack/models/update.dart';
import 'package:nstack/models/update_view_request.dart';
import 'package:nstack/partial/section_key_delegate.dart';
import 'package:nstack/sdk/localization/nstack_localization.dart';
import 'package:nstack/sdk/nstack_sdk.dart';
import 'package:nstack/utils/log_util.dart';
import 'package:url_launcher/url_launcher.dart';

export 'package:nstack/models/app_open_platform.dart';

NStackSdk createNStackSdk() {
    // Define your NStackConfig with hardcoded values
    var config = NStackConfig(
        projectId: '{{projectId}}',
        apiKey: '{{apiKey}}',
        env: NStackEnvironment.fromValue('{{env}}'),
    );

    final languages = [
      {{generateLanguages()}}
    ];

    const bundledTranslations = {
      {{generateBundledTranslations()}}
    };

    // Create an instance of NStackLocalization with the predefined values
    final nstackLocalization = NStackLocalization<NStackLocalizationAsset>(
        config: config,
        assets: const NStackLocalizationAsset(),
        availableLanguages: languages as List<LocalizeIndex>,
        bundledTranslations: bundledTranslations  as Map<String, String>,
        pickedLanguageLocale: '',
    );

    // Return the NStackSdk instance
    return NStackSdk(
        config: config,
        localization: nstackLocalization,
    );
}

/*
*
* Localization & Localization Section Keys
* 
*/

class NStackLocalizationAsset {
    {{generateLocalizationAssets()}}
    const NStackLocalizationAsset();
}

{{generateSections()}}

/*
 *
 * NStack Flutter Widgets
 * 
 */
class NStackScope extends InheritedWidget {
  final NStackState state;
  final String checksum;

  const NStackScope({
    Key? key,
    required Widget child,
    required this.state,
    required this.checksum,
  }) : super(key: key, child: child);

  static NStackState of(BuildContext context) =>
      context.dependOnInheritedWidgetOfExactType<NStackScope>()!.state;

  @override
  bool updateShouldNotify(NStackScope oldWidget) =>
      checksum != oldWidget.checksum;
}

class NStackWidget extends StatefulWidget {
  final Widget child;
  final AppOpenPlatform? platformOverride;
  final VoidCallback? onComplete;

  const NStackWidget({
    Key? key,
    required this.child,
    this.platformOverride,
    this.onComplete,
  }) : super(key: key);

  @override
  NStackState createState() => NStackState();
}

class NStackState extends State<NStackWidget> {
  late final NStackSdk _nstack;
  late final NStackLocalization<NStackLocalizationAsset> localization;
  late Future<bool> _nstackInitFuture;
  late final StreamSubscription _localeChangedSubscription;

  @override
  void initState() {
    super.initState();

    initNStack();

    WidgetsBinding.instance.addPostFrameCallback(
      (timeStamp) {
        _nstack
            .appOpen(
              Localizations.localeOf(context),
              platformOverride: widget.platformOverride,
            )
            .whenComplete(() => widget.onComplete?.call());
      },
    );
  }

  void initNStack() {
    _nstack = createNStackSdk();
    _nstackInitFuture = _nstack.init();
    localization = _nstack.localization as NStackLocalization<NStackLocalizationAsset>;
    _localeChangedSubscription =
        _nstack.localization.onLocaleChanged.listen(_onLocaleChanged);
  }

  void _onLocaleChanged(Locale locale) {
    setState(() {});
  }

  @Deprecated('Use `NStack.localization.changeLocalization` instead')
  Future<void> changeLanguage(Locale locale) {
    return _nstack.localization
        .changeLocalization(locale)
        .whenComplete(() => setState(() {}));
  }

  @override
  void dispose() {
    _localeChangedSubscription.cancel();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return FutureBuilder(
      future: _nstackInitFuture,
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.done) {
          return NStackScope(
            state: this,
            checksum: _nstack.localization.checksum,
            child: widget.child,
          );
        } else {
          return const SizedBox();
        }
      },
    );
  }
}

/*
 *
 * NStack Message
 * 
 */

sealed class NStackHandlerConfiguration {}

final class DefaultNstackHandlerConfiguration
    implements NStackHandlerConfiguration {
  /// Title of the OK button.
  final String? okButtonTitle;

  /// Title of the Open URL button.
  final String? openUrlButtonTitle;

  /// Title of the dialog.
  final String? dialogTitle;

  DefaultNstackHandlerConfiguration({
    this.okButtonTitle,
    this.openUrlButtonTitle,
    this.dialogTitle,
  });
}

final class CustomNstackHandlerConfiguration
    implements NStackHandlerConfiguration {
  /// Callback to customize the message UI.
  final void Function(Message message) onMessage;

  CustomNstackHandlerConfiguration({
    required this.onMessage,
  });
}

class NStackMessageWidget extends StatefulWidget {
  const NStackMessageWidget({
    super.key,
    required this.handlerConfiguration,
    this.child,
  });

  /// Configuration of how the message will be handled.
  /// It can be either `DefaultNstackHandlerConfiguration` or `CustomNstackHandlerConfiguration`.
  final NStackHandlerConfiguration handlerConfiguration;

  final Widget? child;

  @override
  State<StatefulWidget> createState() => _NStackMessageWidgetSate();
}

class _NStackMessageWidgetSate extends State<NStackMessageWidget> {
  late final StreamSubscription _messageSubscription;
  @override
  void initState() {
    super.initState();

    WidgetsBinding.instance.addPostFrameCallback((timeStamp) {
      _messageSubscription =
          context.nstack.messages.onMessage.listen(_onMessage);
    });
  }

  @override
  void dispose() {
    _messageSubscription.cancel();
    super.dispose();
  }

  void _onMessage(Message message) {
    final messageOptions = widget.handlerConfiguration;
    switch (messageOptions) {
      case CustomNstackHandlerConfiguration():
        messageOptions.onMessage(message);
      case DefaultNstackHandlerConfiguration():
        NStackMessageDialog.show(
          context,
          message: message,
          okButtonTitle: messageOptions.okButtonTitle,
          openUrlButtonTitle: messageOptions.openUrlButtonTitle,
          dialogTitle: messageOptions.dialogTitle,
        );
    }
  }

  @override
  Widget build(BuildContext context) {
    return widget.child ?? const SizedBox();
  }
}

class NStackMessageDialog extends StatelessWidget {
  static const _okButtonTitleFallback = 'OK';
  static const _openUrlButtonTitleFallback = 'Open URL';
  static const _dialogTitleFallback = 'Message';

  const NStackMessageDialog._({
    Key? key,
    required this.message,
    this.okButtonTitle = _okButtonTitleFallback,
    this.openUrlButtonTitle = _openUrlButtonTitleFallback,
    this.dialogTitle = _dialogTitleFallback,
  }) : super(key: key);

  /// Message that was received.
  final Message message;

  /// Title of the OK button.
  final String okButtonTitle;

  /// Title of the Open URL button.
  final String openUrlButtonTitle;

  /// Title of the dialog.
  final String? dialogTitle;

  /// Displays the dialog.
  static Future<void> show(
    BuildContext context, {
    required Message message,
    String? okButtonTitle,
    String? openUrlButtonTitle,
    String? dialogTitle = _dialogTitleFallback,
  }) {
    Widget builder(BuildContext context) {
      return NStackMessageDialog._(
        message: message,
        okButtonTitle: okButtonTitle ??
            message.localization?.okBtn ??
            _okButtonTitleFallback,
        openUrlButtonTitle: openUrlButtonTitle ??
            message.localization?.urlBtn ??
            _openUrlButtonTitleFallback,
        dialogTitle: dialogTitle,
      );
    }

    final showDialog = showAdaptiveDialog(
      context: context,
      builder: builder,
    );
    return showDialog.whenComplete(() {
      context.nstack.messages.setMessageViewed(message.id);
    });
  }

  @override
  Widget build(BuildContext context) {
    final titleWidget = dialogTitle != null ? Text(dialogTitle!) : null;
    final messageWidget = Text(message.message);

    final okWidget = Text(okButtonTitle);

    final messageUrl = message.url;
    final uri = messageUrl != null ? Uri.tryParse(messageUrl) : null;
    final isUriValid = uri != null;

    final urlLaunchAction = () async {
      try {
        await launchUrl(uri!);
      } catch (e) {
        LogUtil.log(
          'NStackMessage --> Filed to open URL with error: ${e.toString()}',
        );
      }

      if (context.mounted) {
        Navigator.of(context).pop();
      }
    };

    return AlertDialog.adaptive(
      title: titleWidget,
      content: messageWidget,
      actions: [
        if (isUriValid)
          _adaptiveAction(
            context: context,
            onPressed: urlLaunchAction,
            child: Text(openUrlButtonTitle),
          ),
        _adaptiveAction(
          context: context,
          onPressed: Navigator.of(context).pop,
          child: okWidget,
        ),
      ],
    );
  }
}

/*
 *
 * NStack Version Control
 * 
 */

class NStackVersionControlWidget extends StatefulWidget {
  const NStackVersionControlWidget({
    super.key,
    this.child,
  });

  final Widget? child;

  @override
  State<StatefulWidget> createState() => _NStackVersionControlWidgetSate();
}

class _NStackVersionControlWidgetSate
    extends State<NStackVersionControlWidget> {
  late final StreamSubscription _versionInfoSubscription;
  @override
  void initState() {
    super.initState();

    WidgetsBinding.instance.addPostFrameCallback((timeStamp) {
      _versionInfoSubscription = context
          .nstack.appVersionControl.onVersionUpdateNotification
          .listen(_onVersionUpdateNotification);
    });
  }

  @override
  void dispose() {
    _versionInfoSubscription.cancel();
    super.dispose();
  }

  void _onVersionUpdateNotification(Update update_info) {
    NStackAppUpdateInfoDialog.show(context, update_info: update_info);
  }

  @override
  Widget build(BuildContext context) {
    return widget.child ?? const SizedBox();
  }
}

class NStackAppUpdateInfoDialog extends StatelessWidget {
  const NStackAppUpdateInfoDialog._({
    Key? key,
    required this.update_info,
  }) : super(key: key);

  /// App update info that was received.
  final Update update_info;

  /// Displays the dialog.
  static Future<void> show(
    BuildContext context, {
    required Update update_info,
  }) {
    Widget builder(BuildContext context) {
      return NStackAppUpdateInfoDialog._(
        update_info: update_info,
      );
    }

    return showAdaptiveDialog(
      context: context,
      builder: builder,
    );
  }

  @override
  Widget build(BuildContext context) {
    final titleWidget = update_info.newerVersion != null
        ? Text(update_info.newerVersion!.localizations.title)
        : update_info.newInThisVersion?.localizations != null
            ? Text(update_info.newInThisVersion!.localizations.title)
            : null;

    final messageWidget = update_info.newerVersion != null
        ? Text(update_info.newerVersion!.localizations.message)
        : update_info.newInThisVersion?.localizations != null
            ? Text(update_info.newInThisVersion!.localizations.message)
            : null;

    final dismissWidget =
        update_info.newerVersion?.localizations.negativeBtn != null
            ? Text(update_info.newerVersion!.localizations.negativeBtn!)
            : update_info.newInThisVersion?.localizations.negativeBtn != null
                ? Text(update_info.newInThisVersion!.localizations.negativeBtn!)
                : const Text('OK');

    final updateWidget =
        update_info.newerVersion?.localizations.positiveBtn != null
            ? Text(update_info.newerVersion!.localizations.positiveBtn!)
            : const Text('Update');

    final urlLaunchAction = () async {
      if (update_info.newerVersion?.lastId != null) {
        await context.nstack.appVersionControl.setUpdateInfoViewed(
          updateId: update_info.newerVersion!.lastId,
          answer: UpdateViewAnswer.yes,
          type: UpdateViewType.newer_version,
        );
      }
      try {
        await launchUrl(update_info.newerVersion!.link!);
      } catch (e) {
        LogUtil.log(
          'NStackVersionControl --> Filed to open URL with error: ${e.toString()}',
        );
      }

      if (context.mounted &&
          update_info.newerVersion?.state != UpdateState.force) {
        Navigator.of(context).pop();
      }
    };

    final dismissAction = () async {
      if (update_info.newInThisVersion != null) {
        await context.nstack.appVersionControl.setUpdateInfoViewed(
          updateId: update_info.newInThisVersion!.lastId,
          answer: UpdateViewAnswer.yes,
          type: UpdateViewType.new_in_version,
        );
      } else if (update_info.newerVersion?.lastId != null) {
        await context.nstack.appVersionControl.setUpdateInfoViewed(
          updateId: update_info.newerVersion!.lastId,
          answer: UpdateViewAnswer.yes,
          type: UpdateViewType.newer_version,
        );
      }
      if (context.mounted) {
        Navigator.of(context).pop();
      }
    };

    final shouldShowUrlLaunchAction = update_info.newerVersion?.link != null;
    final shouldShowDismissAction =
        update_info.newerVersion?.state != UpdateState.force;

    return AlertDialog.adaptive(
      title: titleWidget,
      content: messageWidget,
      actions: [
        if (shouldShowUrlLaunchAction)
          _adaptiveAction(
            context: context,
            onPressed: urlLaunchAction,
            child: updateWidget,
          ),
        if (shouldShowDismissAction)
          _adaptiveAction(
            context: context,
            onPressed: dismissAction,
            child: dismissWidget,
          ),
      ],
    );
  }
}

/*
 *
 * NStack Utility Functions
 * 
 */

Widget _adaptiveAction({
  required BuildContext context,
  required VoidCallback onPressed,
  required Widget child,
}) {
  if (Platform.isIOS) {
    return CupertinoDialogAction(onPressed: onPressed, child: child);
  }
  return TextButton(onPressed: onPressed, child: child);
}

/*
 *
 * NStack Flutter Extensions
 * 
 */

/// Allows to access the NStack features using the BuildContext
extension NStackWidgetExtension on BuildContext {
  /// NStack SDK of this project.
  NStackSdk get nstack => NStackScope.of(this)._nstack;

  /// Provides the localization for this NStack project.
  ///
  /// Use `localization.changeLocalization` to update language of the app.
  NStackLocalization<NStackLocalizationAsset> get localization =>
      nstack.localization as NStackLocalization<NStackLocalizationAsset>;
}

/// Allows to access the NStack features from StatefulWidget's State
extension NStackStateExtension<T extends StatefulWidget> on State<T> {
  /// NStack SDK of this project.
  NStackSdk get nstack => context.nstack;

  /// Provides the localization for this NStack project.
  ///
  /// Use `localization.changeLocalization` to update language of the app.
  NStackLocalization<NStackLocalizationAsset> get localization =>
      context.localization;
}