/*
 * ‚ùå GENERATED BY NSTACK, DO NOT MODIFY THIS FILE BY HAND!
 * 
 * To update this file, run
 * dart run build_runner build
 * 
 * üí° FEATURES
 * 
 * To access the NStack features:
 * - Use the BuildContext extension: `context.nstack`.
 * 
 * üî§ LOCALIZATION
 * 
 * To access localization in your UI you can use an extension for BuildContexts:
 * `context.localization.assets.yourSection.yourKey`.
 *
 * üõ†Ô∏è IMPORTANT NOTES FOR SDK USERS
 * 
 * The default environment for the NStack SDK is `prod`.
 * As an SDK user, you typically do not need to set this value.
 * The `stg` environment is for NStack's internal use and should not be used in your `nstack.json`.
 */

/*
* Linter Exception
* The following linter exceptions have been deliberately set for specific reasons:
*/
// ignore_for_file: unnecessary_string_escapes
// ignore_for_file: unused_import
// ignore_for_file: unnecessary_cast

import 'dart:async';

import 'package:flutter/widgets.dart';
import 'package:nstack/models/app_open_platform.dart';
import 'package:nstack/models/language.dart';
import 'package:nstack/models/localize_index.dart';
import 'package:nstack/models/nstack_config.dart';
import 'package:nstack/sdk/nstack_sdk.dart';
import 'package:nstack/sdk/localization/nstack_localization.dart';
import 'package:nstack/partial/section_key_delegate.dart';

export 'package:nstack/models/app_open_platform.dart';

NStackSdk createNStackSdk() {
    // Define your NStackConfig with hardcoded values
    var config = NStackConfig(
        projectId: '{{projectId}}',
        apiKey: '{{apiKey}}',
        env: NStackEnvironment.fromValue('{{env}}'),
    );

    final languages = [
      {{generateLanguages()}}
    ];

    const bundledTranslations = {
      {{generateBundledTranslations()}}
    };

    // Create an instance of NStackLocalization with the predefined values
    final nstackLocalization = NStackLocalization<NStackLocalizationAsset>(
        config: config,
        assets: const NStackLocalizationAsset(),
        availableLanguages: languages as List<LocalizeIndex>,
        bundledTranslations: bundledTranslations  as Map<String, String>,
        pickedLanguageLocale: '',
    );

    // Return the NStackSdk instance
    return NStackSdk(
        config: config,
        localization: nstackLocalization,
    );
}

/*
*
* Localization & Localization Section Keys
* 
*/

class NStackLocalizationAsset {
    {{generateLocalizationAssets()}}
    const NStackLocalizationAsset();
}

{{generateSections()}}

/*
 *
 * NStack Flutter Widgets
 * 
 */
class NStackScope extends InheritedWidget {
  final NStackState state;
  final String checksum;

  const NStackScope({
    Key? key,
    required Widget child,
    required this.state,
    required this.checksum,
  }) : super(key: key, child: child);

  static NStackState of(BuildContext context) =>
      context.dependOnInheritedWidgetOfExactType<NStackScope>()!.state;

  @override
  bool updateShouldNotify(NStackScope oldWidget) =>
      checksum != oldWidget.checksum;
}

class NStackWidget extends StatefulWidget {
  final Widget child;
  final AppOpenPlatform? platformOverride;
  final VoidCallback? onComplete;

  const NStackWidget({
    Key? key,
    required this.child,
    this.platformOverride,
    this.onComplete,
  }) : super(key: key);

  @override
  NStackState createState() => NStackState();
}

class NStackState extends State<NStackWidget> {
  late final NStackSdk _nstack;
  late final NStackLocalization<NStackLocalizationAsset> localization;
  late Future<bool> _nstackInitFuture;
  late final StreamSubscription _localeChangedSubscription;

  @override
  void initState() {
    super.initState();

    initNStack();

    WidgetsBinding.instance.addPostFrameCallback(
      (timeStamp) {
        _nstack
            .appOpen(
              Localizations.localeOf(context),
              platformOverride: widget.platformOverride,
            )
            .whenComplete(() => widget.onComplete?.call());
      },
    );
  }

  void initNStack() {
    _nstack = createNStackSdk();
    _nstackInitFuture = _nstack.init();
    localization = _nstack.localization as NStackLocalization<NStackLocalizationAsset>;
    _localeChangedSubscription =
        _nstack.localization.onLocaleChanged.listen(_onLocaleChanged);
  }

  void _onLocaleChanged(Locale locale) {
    setState(() {});
  }

  @Deprecated('Use `NStack.localization.changeLocalization` instead')
  Future<void> changeLanguage(Locale locale) {
    return _nstack.localization
        .changeLocalization(locale)
        .whenComplete(() => setState(() {}));
  }

  @override
  void dispose() {
    _localeChangedSubscription.cancel();

    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return FutureBuilder(
      future: _nstackInitFuture,
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.done) {
          return NStackScope(
            state: this,
            checksum: _nstack.localization.checksum,
            child: widget.child,
          );
        } else {
          return const SizedBox();
        }
      },
    );
  }
}

/*
 *
 * NStack Flutter Extensions
 * 
 */

/// Allows to access the NStack features using the BuildContext
extension NStackWidgetExtension on BuildContext {
  /// NStack SDK of this project.
  NStackSdk get nstack => NStackScope.of(this)._nstack;

  /// Provides the localization for this NStack project.
  ///
  /// Use `localization.changeLocalization` to update language of the app.
  NStackLocalization<NStackLocalizationAsset> get localization =>
      nstack.localization as NStackLocalization<NStackLocalizationAsset>;
}

/// Allows to access the NStack features from StatefulWidget's State
extension NStackStateExtension<T extends StatefulWidget> on State<T> {
  /// NStack SDK of this project.
  NStackSdk get nstack => context.nstack;

  /// Provides the localization for this NStack project.
  ///
  /// Use `localization.changeLocalization` to update language of the app.
  NStackLocalization<NStackLocalizationAsset> get localization =>
      context.localization;
}