import 'dart:async';
import 'dart:convert';

import 'package:build/build.dart';
import 'package:nstack/src/nstack_repository.dart';

/// A builder which outputs a 'nstack.dart' file. This file provides a NStack instance, type safe section key accessors and all bundled translations.
class NstackBuilder implements Builder {
  const NstackBuilder();

  @override
  FutureOr<void> build(BuildStep buildStep) async {
    NStackRepository repository = NStackRepository();
    /// Read the input source and parse it as JSON.
    Map<String, Object> input;
    String projectId;
    String apiKey;
    final AssetId outputId = buildStep.inputId.changeExtension('.dart');
    var defaultLanguage;
    final StringBuffer output = StringBuffer();

    try {
      input = json.decode(await buildStep.readAsString(buildStep.inputId));
      projectId = input["nstack_project_id"]; // TODO: Validate.
      apiKey = input["nstack_api_key"]; // TODO: Validate.

      if(projectId.isEmpty) {
        print("ERROR in nstack.json -> 'nstack_project_id' not set");
        return;
      }

      if(apiKey.isEmpty) {
        print("ERROR in nstack.json -> 'nstack_api_key' not set");
        return;
      }

      repository.updateHeaders(projectId, apiKey);
    } catch (err) {
      print(err);
    }

    _writeHeader(output);

    try {
      var languages = await repository.fetchAvailableLanguages();

      // Find default
      defaultLanguage = languages.where((element) => element['language']['is_default'] == true).first;
      print("Found defaultLanguage: " + defaultLanguage['language'].toString());

      // Fetch localization for default language
      print("Fetching default localization from: " + defaultLanguage['url'].toString());
      var defaultLanguageJson = await repository.fetchLocalizationForLanguage(defaultLanguage);

      print("Creating Localization class...");
      _writeLocalization(defaultLanguageJson, output);

      print("Creating NStack section classes...");
      _writeSections(defaultLanguageJson, output);

      print("Creating NStack...");
      _writeNStackConfig(projectId, apiKey, output);
      _writeLanguageList(languages, output);
      await _writeBundledTranslations(languages, repository, output);
      _writeNStack(output);

      print("Creating NStackWidget...");
      _writeNStackWidget(output);
    } catch (err) {
      print(err);
    }

    await buildStep.writeAsString(outputId, output.toString());
  }

  void _writeHeader(StringBuffer output) {
    output.writeln("// Generated by NStack, do not modify this file.");
    output.writeln("import 'package:flutter/widgets.dart';");
    output.writeln("import 'package:nstack/models/language.dart';");
    output.writeln("import 'package:nstack/models/nstack_config.dart';");
    output.writeln("import 'package:nstack/models/section_key.dart';");
    output.writeln("import 'package:nstack/nstack.dart';");
    output.writeln("import 'package:nstack/partial/section_key_delegate.dart';");
    output.writeln("");
    output.writeln("// Update this file by running:");
    output.writeln("// - `flutter pub pub run build_runner build`, if your package depends on Flutter");
    output.writeln("// - `pub run build_runner build` otherwise");
    output.writeln("");
  }

  void _writeLocalization(String response, StringBuffer output) {
    var languageJson = json.decode(response)['data'];

    // Localization class
    output.writeln("class Localization {");

    // Create section fields
    languageJson.forEach((section, keys) {
      // Default is a keyword
      if(section == "default") section = "defaultSection";
      var classSection = section.toString().replaceRange(0, 1, section.toString().substring(0, 1).toUpperCase());

      output.writeln("\t_$classSection _$section = _$classSection();");
      output.writeln("\t_$classSection get $section => _$section;");
    });

    output.writeln('''
}
''');
  }

  void _writeSections(String response, StringBuffer output) {
    var languageJson = json.decode(response)['data'];
    languageJson.forEach((section, keys) {
      var rawSection = section;
      if(section == "default") section = "defaultSection";

      var uppercaseSection = section.toString().replaceRange(0, 1, section.toString().substring(0, 1).toUpperCase());
      output.writeln("class _$uppercaseSection extends SectionKeyDelegate {");

      // Actual String key = "value";
      keys.forEach((k, v) {
        //output.writeln("\tString _$k = \"$v\";");
        output.writeln("\tString get $k => get(SectionKey(\"$rawSection\", \"$k\", \"$v\"));");
      });
      output.writeln('''
}
''');
    });
  }

  void _writeNStackConfig(String projectId, String apiKey, StringBuffer output) {
    output.writeln('''
final _config = NStackConfig(projectId: "$projectId", apiKey: "$apiKey");
    ''');
  }

  void _writeLanguageList(dynamic languages, StringBuffer output) {
    output.writeln("final _languages = [");

    languages.forEach((v) {
      var language = v['language'];
      output.writeln("\tLanguage(id: ${language['id']}, locale: \"${language['locale']}\", direction: \"${language['direction']}\", isDefault: ${language['is_default']}, isBestFit: ${language['is_best_fit']}),");
    });

    output.writeln('''
];
''');
  }

  Future _writeBundledTranslations(dynamic languages, NStackRepository repository, StringBuffer output) async {
    output.writeln('''
final _bundledTranslations = {''');

    await Future.forEach(languages, (element) async {
      var locale = element['language']['locale'];
      var content = (await repository.fetchLocalizationForLanguage(element));
      output.writeln("\t'$locale': '$content',");
    });

    output.writeln('''
};
''');
  }

  void _writeNStack(StringBuffer output) async {
    output.writeln('''
final _nstack = NStack<Localization>(
		config: _config,
		localization: Localization(),
		availableLanguages: _languages,
		bundledTranslations: _bundledTranslations
);
''');
  }

  void _writeNStackWidget(StringBuffer output) async {
    output.writeln('''
class NStackWidget extends InheritedWidget {
  final NStack<Localization> nstack = _nstack;

  NStackWidget({Key key, @required Widget child})
      : assert(child != null),
        super(key: key, child: child);

  static NStack of(BuildContext context) =>
      context.dependOnInheritedWidgetOfExactType<NStackWidget>().nstack;

  @override
  bool updateShouldNotify(NStackWidget oldWidget) =>
      nstack != oldWidget.nstack;
}

extension NStackWidgetExtension on BuildContext {
	Localization get localization => NStackWidget.of(this).localization;
}

class NStackInitWidget extends StatefulWidget {
  final Widget child;

  const NStackInitWidget({Key key, Widget child})
      : child = child,
        super(key: key);

  @override
  _NStackInitState createState() => _NStackInitState();
}

class _NStackInitState extends State<NStackInitWidget> {
  static bool _initialized = false;

  void setupNStack(BuildContext context) {
    final locale = Localizations.localeOf(context);
    final nstack = NStackWidget.of(context);
    nstack.appOpen(locale);
  }

  @override
  Widget build(BuildContext context) {
    if (!_initialized) {
      setupNStack(context);
      _initialized = true;
    }
    return widget.child;
  }
}
''');
  }

  @override
  Map<String, List<String>> get buildExtensions => const {'.json': ['.dart']};
}
