import 'dart:async';
import 'dart:convert';

import 'package:build/build.dart';
import 'package:dart_style/dart_style.dart';
import 'package:nstack/models/language.dart';
import 'package:nstack/models/language_response.dart';
import 'package:nstack/models/localize_index.dart';
import 'package:nstack/models/nstack_config.dart';
import 'package:nstack/other/extensions.dart';
import 'package:nstack/other/reserved_keywords.dart';
import 'package:nstack/src/nstack_repository.dart';

/// A builder which outputs a 'nstack.dart' file. This file provides a NStack instance, type safe section key accessors and all bundled translations.
class NstackBuilder implements Builder {
  const NstackBuilder();

  @override
  FutureOr<void> build(BuildStep buildStep) async {
    if (!buildStep.inputId.toString().contains('nstack.json')) {
      return;
    }

    /// Read the input source and parse it as JSON.
    final AssetId outputId = buildStep.inputId.changeExtension('.dart');
    final StringBuffer output = StringBuffer();

    // Read nstack.json file
    final Map<String, dynamic> input =
        json.decode(await buildStep.readAsString(buildStep.inputId));

    final String projectId = input['nstack_project_id'] ?? '';
    final String apiKey = input['nstack_api_key'] ?? '';

    throwIf(projectId.isNullOrBlank, () {
      return ArgumentError('"nstack_project_id" not set');
    });

    throwIf(apiKey.isNullOrBlank, () {
      return ArgumentError('"nstack_api_key" not set');
    });

    final config = NStackConfig(
      projectId: projectId,
      apiKey: apiKey,
    );

    final repository = NStackRepository(config);

    _writeHeader(output);

    try {
      print('Creating NStack...');
      _writeNStack(output);
      _writeNStackConfig(projectId, apiKey, output);

      final languages = await repository.fetchAvailableLanguages();

      // Find the default language
      LocalizeIndex defaultLanguage =
          languages.where((it) => it.language!.isDefault == true).first;
      print('Found the default Language: ${defaultLanguage.language}');

      // Fetch localization for default language
      print('Fetching default localization from: ${defaultLanguage.url}');
      final localizationResponse =
          await repository.fetchLocalizationForLanguage(defaultLanguage);
      final localizationData =
          LocalizationData.fromJson(jsonDecode(localizationResponse));

      print('Creating NStack language lists & bundled translations...');
      _writeLanguageList(languages, output);
      await _writeBundledTranslations(languages, repository, output);

      print('Creating Localization class...');
      _writeLocalization(localizationData, output);

      print('Creating NStack section classes...');
      _writeSections(localizationData, output);

      print('Creating NStackWidget...');
      _writeNStackWidget(output);
    } catch (e, s) {
      print(e);
      print(s);
    }

    final outputFormatted = DartFormatter().format(output.toString());
    await buildStep.writeAsString(outputId, outputFormatted);
  }

  void _writeHeader(StringBuffer output) {
    output.writeln(
      '''
// ignore_for_file: implementation_imports, non_constant_identifier_names, depend_on_referenced_packages

/*
 * ‚ùå GENERATED BY NSTACK, DO NOT MODIFY THIS FILE BY HAND!
 * 
 * To update this file, run
 * 
 * Flutter projects: 
 *    flutter pub run build_runner build
 * 
 * Dart projects:
 *    pub run build_runner build
 * 
 * üí° FEATURES
 * 
 * To access the NStack features:
 * - Use the global `NStack` object;
 * - Use the BuildContext extension: `context.nstack`.
 * 
 * üî§ LOCALIZATION
 * 
 * To access localization in your UI you can use an extension for BuildContexts:
 * `context.localization.yourSection.yourKey`.
 */

import 'dart:async';
import 'dart:io';

import 'package:flutter/cupertino.dart' as cupertino;
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart' as material;
import 'package:flutter/widgets.dart';
import 'package:nstack/models/app_open_platform.dart';
import 'package:nstack/models/language.dart';
import 'package:nstack/models/localize_index.dart';
import 'package:nstack/models/message.dart';
import 'package:nstack/models/nstack_config.dart';
import 'package:nstack/nstack.dart';
import 'package:nstack/partial/section_key_delegate.dart';
import 'package:nstack/sdk/localization/nstack_localization.dart';
import 'package:nstack/sdk/messages/nstack_messages.dart';
import 'package:nstack/src/nstack_repository.dart';
import 'package:url_launcher/url_launcher.dart';

export 'package:nstack/models/app_open_platform.dart';
      ''',
    );
  }

  void _writeNStack(StringBuffer output) async {
    output.writeln('''

/*
 *
 * NStack Config
 * 
 */

final NStack = NStackSdk<Localization>(
  repository: _nstackRepository,
  isDebug: kDebugMode,
  localization: _nstackLocalization,
  messages: _nstackMessages,
);

const _nstackRepository = NStackRepository(_config);

final _nstackLocalization = NStackLocalization<Localization>(
  repository: _nstackRepository,
  translations: const Localization(),
  availableLanguages: _languages,
  bundledTranslations: _bundledTranslations,
  pickedLanguageLocale: '',
  isDebug: kDebugMode,
);

final _nstackMessages = NStackMessages(
  repository: _nstackRepository,
);
''');
  }

  void _writeNStackConfig(
    String? projectId,
    String? apiKey,
    StringBuffer output,
  ) {
    output.writeln('''
const _config = NStackConfig(projectId: '$projectId', apiKey: '$apiKey',);
    ''');
  }

  Future _writeBundledTranslations(
    List<LocalizeIndex> languages,
    NStackRepository repository,
    StringBuffer output,
  ) async {
    output.writeln('''
const _bundledTranslations = {''');

    await Future.forEach<LocalizeIndex>(languages, (localizeIndex) async {
      final locale = localizeIndex.language!.locale;
      var content =
          (await repository.fetchLocalizationForLanguage(localizeIndex));
      output.writeln('\t\'$locale\': r\'\'\'$content\'\'\',');
    });

    output.writeln('''
};
''');
  }

  void _writeLanguageList(List<LocalizeIndex> languages, StringBuffer output) {
    output.writeln(''' 
/*
 * 
 * Languages & Bundled translations
 * 
 */
    
    ''');
    output.writeln('final _languages = [');

    languages.forEach((localizeIndex) {
      output.write(
          "\tLocalizeIndex(id: ${localizeIndex.id}, url: null, lastUpdatedAt: null, shouldUpdate: false,  language: const ");
      Language language = localizeIndex.language!;
      output.write(
        'Language(id: ${language.id}, name: \'${language.name}\', locale: \'${language.locale}\', direction: \'${language.direction}\', isDefault: ${language.isDefault}, isBestFit: ${language.isBestFit},),',
      );
      output.writeln('),');
    });

    output.writeln('''
];
''');
  }

  void _writeLocalization(LocalizationData localization, StringBuffer output) {
    final languageJson = localization.data!;

    output.writeln('''
/*
 *
 * Localization & Localization Section Keys
 * 
 */
''');

    // Localization class
    output.writeln('class Localization {');

    // Create section fields
    languageJson.forEach((sectionKey, keys) {
      String className = _getClassNameFromSectionKey(sectionKey);
      final variableName =
          '${className[0].toLowerCase()}${className.substring(1)}';
      output.writeln('\tfinal $variableName = const _$className();');
    });
    output.writeln('');
    output.writeln('\tconst Localization();');
    output.writeln('''
}
''');
  }

  void _writeSections(LocalizationData localization, StringBuffer output) {
    final languageJson = localization.data!;
    languageJson.forEach((sectionKey, translations) {
      String className = _getClassNameFromSectionKey(sectionKey);

      output.writeln('class _$className extends SectionKeyDelegate {');
      output.writeln('\tconst _$className(): super(\'$sectionKey\');');
      output.writeln('');

      (translations as Map)
          .cast<String, String>()
          .forEach((stringKey, stringValue) {
        stringValue = _escapeSpecialCharacters(stringValue);
        output.writeln(
            '\tString get $stringKey => get(\'$stringKey\', \"$stringValue\");');
      });
      output.writeln('''
}
''');
    });
  }

  /// Escapes single quote, double quote and dollar sign with \', \", \$
  String _escapeSpecialCharacters(String stringValue) {
    return stringValue
        .replaceAll("'", "\\'")
        .replaceAll('"', '\\"')
        .replaceAll('\$', '\\\$')
        .replaceAll('\n', '\\n');
  }

  /// Returns a CamelCase class name from the Localization section key
  String _getClassNameFromSectionKey(String sectionKey) {
    // Check if the section key is using a reserved keyword
    final adjustedSectionKey = DartKeywords.isReserved(sectionKey)
        // Append 'Section' to the name of the original sectionKey
        ? '${sectionKey}Section'
        // Use the original sectionKey
        : sectionKey;

    // Format the name to CamelCase
    return adjustedSectionKey.replaceRange(
      0,
      1,
      sectionKey.substring(0, 1).toUpperCase(),
    );
  }

  void _writeNStackWidget(StringBuffer output) async {
    output.writeln('''
/*
 *
 * NStack Flutter Widgets
 * 
 */

/// Allows to access NStack features via a `BuildContext`.
class NStackScope extends InheritedWidget {
  final NStackState state;
  final String checksum;

  const NStackScope({Key? key, required Widget child, required this.state, required this.checksum,})
    : super(key: key, child: child);

  static NStackState of(BuildContext context) =>
      context.dependOnInheritedWidgetOfExactType<NStackScope>()!.state;

  @override
  bool updateShouldNotify(NStackScope oldWidget) =>
      checksum != oldWidget.checksum;
}

/// Widget that is used for accessing NStack features from the widget tree
/// & listening for localization changes.
///
/// Is required for all the children widgets like [NStackMessageListener]
///
/// In your app, use the `builder` property like this:
/// ```dart
/// MaterialApp(
///    ...
///    builder: (context, child) {
///      return NStackWidget(
///        child: child!,
///       );
///    },
///    ...
/// );
/// ```
class NStackWidget extends StatefulWidget {
  final AppOpenPlatform? platformOverride;
  final VoidCallback? onComplete;
  final Widget child;

  const NStackWidget({Key? key, required this.child, this.platformOverride, this.onComplete,})
      : super(key: key);

  @override
  NStackState createState() => NStackState();
}

class NStackState extends State<NStackWidget> {
	final NStackSdk<Localization> _nstack = NStack;
  bool _initializedNStack = false;

  late Future<bool> _nstackInitFuture;

  late final StreamSubscription _localeChangedSubscription;

  /// Gets the NStack Localization feature configured for this project.
  NStackLocalization<Localization> get localization => _nstack.localization;

  /// Gets the NStack Message feature configured for this project.
  NStackMessages get messages => _nstack.messages;

  @override
  void initState() {
    super.initState();
    
		_nstackInitFuture = _nstack.init();

    _localeChangedSubscription = NStack.localization.onLocaleChanged.listen(_onLocaleChanged);
  }

  void _onLocaleChanged(Locale locale) {
    setState(() {});
  }

  @Deprecated('Use `NStack.localization.changeLocalization` instead')
	Future<void> changeLanguage(Locale locale) {
		return _nstack.localization.changeLocalization(locale).whenComplete(() => setState(() {}));
	}

  @override
  void dispose() {
    _localeChangedSubscription.cancel();

    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    if (!_initializedNStack) {
      _nstack
          .appOpen(Localizations.localeOf(context), platformOverride: widget.platformOverride)
          .whenComplete(() => widget.onComplete?.call());
      _initializedNStack = true;
    }

    return FutureBuilder(
        future: _nstackInitFuture,
        builder: (context, snapshot) {
          if(snapshot.connectionState == ConnectionState.done) {
            return NStackScope(
              state: this,
              checksum: _nstack.localization.checksum,
              child: widget.child,
            );
          } else {
            return const SizedBox();
          }
        },
      );
  }
}

/*
 *
 * NStack Messages Feature
 * 
 */

/// Listens for new messages from the NStack Messages feature.
/// 
/// In where you want to use it, add this widget:
/// ```dart
/// Widget build(BuildContext context) {
///   return NStackMessageListener(
///     onMessage: (Message message) {
///       // Do whatever you want with the received message.
///       // For example, use NStackMessageDialog to display the message.
///       showDialog(
///         context: context,
///         builder: (context) {
///           return NStackMessageDialog(message: message);
///         },
///     },
///     child: Scaffold(...),
///   );
/// }
/// ```
class NStackMessageListener extends StatefulWidget {
  const NStackMessageListener({
    Key? key,
    required this.onMessage,
    this.child,
  }) : super(key: key);

  final void Function(Message message) onMessage;
  final Widget? child;

  @override
  State<NStackMessageListener> createState() => _NStackMessageListenerState();
}

class _NStackMessageListenerState extends State<NStackMessageListener> {
  late final StreamSubscription _subscription;

  @override
  void initState() {
    super.initState();

    WidgetsBinding.instance.addPostFrameCallback((timeStamp) {
      final scope = NStackScope.of(context);
      _subscription = scope.messages.onMessage.listen(widget.onMessage);
    });
  }

  @override
  void dispose() {
    _subscription.cancel();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return widget.child ?? const SizedBox();
  }
}

  /// Default Message Alert Dialog that adapts to the platform and renders the:
  /// - Message body
  /// - OK Button 
  /// - Open URL button (if [Message.url] is provided)
  /// 
  /// When the dialog is dismissed, the alert reports that the message is viewed.
  /// 
  /// Use it like this:
  /// ```dart
  /// NStackMessageDialog.show(
  ///   context,
  ///   message: message,
  ///   /* Other params if needed */
  /// );
  /// ```
class NStackMessageDialog extends StatelessWidget {
  static const _okButtonTitleFallback = 'OK';
  static const _openUrlButtonTitleFallback = 'Open URL';
  static const _dialogTitleFallback = 'Message';

  const NStackMessageDialog._({
    Key? key,
    required this.message,
    this.onOkPressed,
    this.onOpenUrlPressed,
    this.okButtonTitle = _okButtonTitleFallback,
    this.openUrlButtonTitle = _openUrlButtonTitleFallback,
    this.dialogTitle = _dialogTitleFallback,
  }) : super(key: key);

  /// Message that was received.
  final Message message;

  /// Title of the OK button.
  final String okButtonTitle;

  /// Title of the Open URL button.
  final String openUrlButtonTitle;

  /// Title of the dialog.
  final String? dialogTitle;

  /// Optional callback when a user presses the OK button.
  ///
  /// By default, it closes the dialog and reports that the message was viewed.
  final VoidCallback? onOkPressed;

  /// Optional callback when a user presses Open URL button.
  ///
  /// By default, it closes the dialog, reports that the message was viewed
  /// and opens the URL.
  final void Function(Uri uri)? onOpenUrlPressed;

  /// Displays the dialog.
  static Future<void> show(
    BuildContext context, {
    required Message message,
    VoidCallback? onOkPressed,
    void Function(Uri uri)? onOpenUrlPressed,
    String? okButtonTitle,
    String? openUrlButtonTitle,
    String? dialogTitle = _dialogTitleFallback,
  }) {
    Widget builder(BuildContext context) {
      return NStackMessageDialog._(
        message: message,
        onOkPressed: onOkPressed,
        onOpenUrlPressed: onOpenUrlPressed,
        okButtonTitle: okButtonTitle ??
            message.localization?.okBtn ??
            _okButtonTitleFallback,
        openUrlButtonTitle: openUrlButtonTitle ??
            message.localization?.urlBtn ??
            _openUrlButtonTitleFallback,
        dialogTitle: dialogTitle,
      );
    }

    final showDialog = Platform.isIOS
        ? cupertino.showCupertinoDialog(context: context, builder: builder)
        : material.showDialog(context: context, builder: builder);

    return showDialog.whenComplete(() {
      NStack.messages.setMessageViewed(message.id);
    });
  }

  @override
  Widget build(BuildContext context) {
    final titleWidget = dialogTitle != null ? Text(dialogTitle!) : null;
    final messageWidget = Text(message.message);

    final okWidget = Text(okButtonTitle);
    final okAction = onOkPressed ?? Navigator.of(context).pop;

    final messageUrl = message.url;
    final Uri? uri;

    if (messageUrl != null) {
      uri = Uri.tryParse(messageUrl);
    } else {
      uri = null;
    }

    final isUriValid = uri != null;

    final urlLaunchAction = !isUriValid
        ? null
        : (onOpenUrlPressed != null ? () => onOpenUrlPressed!(uri!) : null) ??
            () {
              launchUrl(uri!);
              Navigator.of(context).pop();
            };

    if (Platform.isIOS) {
      return cupertino.CupertinoAlertDialog(
        title: titleWidget,
        content: messageWidget,
        actions: [
          cupertino.CupertinoDialogAction(
            onPressed: okAction,
            child: okWidget,
          ),
          if (isUriValid)
            cupertino.CupertinoDialogAction(
              isDefaultAction: true,
              onPressed: urlLaunchAction,
              child: Text(openUrlButtonTitle),
            ),
        ],
      );
    }

    return material.AlertDialog(
      title: titleWidget,
      content: messageWidget,
      actions: [
        if (isUriValid)
          material.TextButton(
            onPressed: urlLaunchAction,
            child: Text(openUrlButtonTitle),
          ),
        material.TextButton(
          onPressed: okAction,
          child: okWidget,
        ),
      ],
    );
  }
}

/*
 *
 * NStack Flutter Extensions
 * 
 */

/// Allows to access the NStack features using the BuildContext
extension NStackWidgetExtension on BuildContext {
  /// NStack SDK of this project.
	NStackSdk<Localization> get nstack => NStackScope.of(this)._nstack;

  /// Provides the localization for this NStack project.
  /// 
  /// Use `NStackScope.of(context).state.changeLanguage` to update language of the app.
	Localization get localization => nstack.localization.translations;

}

/// Allows to access the NStack features from StatefulWidget's State
extension NStackStateExtension<T extends StatefulWidget> on State<T> {
  /// NStack SDK of this project.
	NStackSdk<Localization> get nstack => context.nstack;

  /// Provides the localization for this NStack project.
  /// 
  /// Use `NStackScope.of(context).state.changeLanguage` to update language of the app.
	Localization get localization => context.localization;
}
''');
  }

  @override
  Map<String, List<String>> get buildExtensions => const {
        '.json': ['.dart']
      };
}
